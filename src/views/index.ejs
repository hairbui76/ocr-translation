<!doctype html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Image to PDF Converter</title>
	<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet" />
	<style>
		:root {
			--primary-color: #4a90e2;
			--secondary-color: #f39c12;
			--background-color: #f4f7f9;
			--text-color: #333;
			--border-radius: 8px;
		}

		body {
			font-family: "Poppins", sans-serif;
			line-height: 1.6;
			margin: 0;
			padding: 0;
			background-color: var(--background-color);
			color: var(--text-color);
		}

		.container {
			max-width: 800px;
			margin: 2rem auto;
			padding: 2rem;
			background-color: #fff;
			border-radius: var(--border-radius);
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		}

		h1 {
			text-align: center;
			color: var(--primary-color);
			margin-bottom: 2rem;
		}

		#uploadForm {
			display: flex;
			flex-direction: column;
			gap: 1rem;
			margin-bottom: 2rem;
		}

		#imageInput,
		#folderInput {
			width: 0.1px;
			height: 0.1px;
			opacity: 0;
			overflow: hidden;
			position: absolute;
			z-index: -1;
		}

		.file-input-label {
			display: inline-block;
			width: 100%;
			padding: 0.75rem 1.5rem;
			background-color: var(--primary-color);
			color: #fff;
			border-radius: var(--border-radius);
			cursor: pointer;
			transition: background-color 0.3s ease;
			text-align: center;
		}

		.file-input-label:hover {
			background-color: #3a7bd5;
		}

		#uploadButton {
			padding: 0.75rem 1.5rem;
			background-color: var(--secondary-color);
			color: #fff;
			border: none;
			border-radius: var(--border-radius);
			cursor: pointer;
			transition: background-color 0.3s ease;
			font-size: 1rem;
			font-weight: 600;
		}

		#uploadButton:hover {
			background-color: #e67e22;
		}

		#uploadButton:disabled {
			background-color: #ccc;
			cursor: not-allowed;
		}

		#result {
			margin-top: 1rem;
			padding: 1rem;
			background-color: #e8f0fe;
			border-radius: var(--border-radius);
			text-align: center;
		}

		#pdfViewer {
			width: 100%;
			height: 600px;
			border: none;
			border-radius: var(--border-radius);
			display: none;
			margin-top: 1rem;
		}

		.loader {
			border: 4px solid #f3f3f3;
			border-top: 4px solid var(--primary-color);
			border-radius: 50%;
			width: 40px;
			height: 40px;
			animation: spin 1s linear infinite;
			margin: 1rem auto;
			display: none;
		}

		@keyframes spin {
			0% {
				transform: rotate(0deg);
			}

			100% {
				transform: rotate(360deg);
			}
		}

		.progress-bar {
			width: 100%;
			height: 20px;
			background-color: #e0e0e0;
			border-radius: 10px;
			margin-top: 1rem;
			overflow: hidden;
		}

		.progress {
			width: 0;
			height: 100%;
			background-color: var(--primary-color);
			transition: width 0.3s ease;
		}

		.upload-btn-container {
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		.checkbox-container {
			display: flex;
			align-items: center;
			padding: 0 0.5rem;
		}

		#cached,
		#folder {
			width: 1.5rem;
			height: 1.5rem;
			cursor: pointer;
		}

		#fileCount {
			margin: 0;
		}

		.progress-container {
			margin-top: 1rem;
		}

		.file-progress {
			margin-bottom: 1rem;
			background-color: #f5f5f5;
			padding: 0.5rem;
			border-radius: var(--border-radius);
		}

		.file-info {
			display: flex;
			justify-content: space-between;
			margin-bottom: 0.5rem;
			font-size: 0.9rem;
		}

		.file-name {
			color: var(--text-color);
			font-weight: 500;
		}

		.progress-percentage {
			color: var(--primary-color);
			font-weight: 600;
		}

		.progress-bar {
			width: 100%;
			height: 10px;
			background-color: #e0e0e0;
			border-radius: 5px;
			overflow: hidden;
		}

		.progress {
			width: 0;
			height: 100%;
			background-color: var(--primary-color);
			transition: width 0.3s ease;
		}

		.tabs-container {
			width: 100%;
			margin-top: 1rem;
		}

		.tab-buttons {
			display: flex;
			gap: 0.5rem;
			overflow-x: auto;
			padding-bottom: 0.5rem;
			border-bottom: 2px solid #e0e0e0;
		}

		.tab-button {
			padding: 0.5rem 1rem;
			background-color: #f5f5f5;
			border: none;
			border-radius: var(--border-radius);
			cursor: pointer;
			white-space: nowrap;
			font-size: 0.9rem;
			transition: all 0.3s ease;
		}

		.tab-button:hover {
			background-color: #e0e0e0;
		}

		.tab-button.active {
			background-color: var(--primary-color);
			color: white;
		}

		.pdf-container {
			display: none;
			margin-top: 1rem;
		}

		.pdf-container.active {
			display: block;
		}

		.pdf-viewer {
			width: 100%;
			height: 700px;
			border: none;
			border-radius: var(--border-radius);
		}
	</style>
</head>

<body>
	<div class="container">
		<h1>Image to PDF Converter</h1>
		<form id="uploadForm">
			<div class="upload-btn-container">
				<input type="file" class="folder-input" id="folderInput" name="imageInput" accept="image/*" webkitdirectory multiple />
				<input type="file" class="file-input" id="imageInput" name="imageInput" accept="image/*" multiple />
				<label for="imageInput" class="file-input-label">Choose File</label>
				<div class="switch-checkbox">
					<div class="checkbox-container">
						<input type="checkbox" id="cached" name="cached" value="true" checked />
						<label for="cached">Cached</label>
					</div>
					<div class="checkbox-container">
						<input type="checkbox" id="folder" name="folder" value="false" />
						<label for="folder">Folder</label>
					</div>
				</div>
			</div>
			<p id="fileCount"></p>
			<button type="submit" id="uploadButton" disabled>Convert to PDF</button>
		</form>
		<div class="progress-container" id="progressContainer"></div>
		<div class="loader" id="loader"></div>
		<div id="result" style="display: none"></div>
		<div class="tabs-container">
			<div class="tab-buttons" id="tabButtons"></div>
			<div id="pdf-results-container"></div>
		</div>
	</div>

	<script>
		const PORT = "<%= servicePort %>";
		const BASE_URL = `${window.location.protocol}//${window.location.hostname}:${PORT}/api/v1/pdf`;

		const $ = document.querySelector.bind(document);
		const $$ = document.querySelectorAll.bind(document);

		const uploadForm = $("#uploadForm");
		const imageInput = $("#imageInput");
		const folderInput = $("#folderInput");
		const cached = $("#cached");
		const folderSupported = $("#folder");
		const uploadButton = $("#uploadButton");
		const resultDiv = $("#result");
		const loader = $("#loader");
		const progressBar = $("#progressBar");
		const pdfResultsContainer = $("#pdf-results-container");

		function createProgressBar(fileName) {
			const progressElement = document.createElement('div');
			progressElement.className = 'file-progress';
			progressElement.innerHTML = `
                <div class="file-info">
                    <span class="file-name">${fileName}</span>
                    <span class="progress-percentage">0%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress"></div>
                </div>
            `;
			return progressElement;
		}

		function updateProgress(progressElement, progress) {
			const progressBar = progressElement.querySelector('.progress');
			const percentageText = progressElement.querySelector('.progress-percentage');
			progressBar.style.width = `${progress}%`;
			percentageText.textContent = `${progress}%`;
		}

		folderSupported.addEventListener("change", function (e) {
			const folderInput = $(".folder-input");
			const fileInput = $(".file-input");
			const label = $(".file-input-label");
			const folder = e.target.checked;

			if (folder) {
				folderInput.style.display = "block";
				fileInput.style.display = "none";
				label.textContent = "Choose Folder";
				label.setAttribute("for", "folderInput");
			} else {
				folderInput.style.display = "none";
				fileInput.style.display = "block";
				label.textContent = "Choose File";
				label.setAttribute("for", "imageInput");
			}
		});

		folderInput.addEventListener("change", function (e) {
			const files = e.target.files;
			const label = $(".file-input-label");
			const folderName = files.length
				? files[0].webkitRelativePath.split("/")[0]
				: "Choose Folder";

			label.textContent = folderName;
			uploadButton.disabled = !files.length;

			const fileCountElement = $("#fileCount");
			fileCountElement.textContent = `${files.length} files are uploaded`;
		});

		imageInput.addEventListener("change", function (e) {
			const files = e.target.files;
			const label = $(".file-input-label");

			label.textContent = files.length ? files[0].name : "Choose File";
			uploadButton.disabled = !files.length;

			const fileCountElement = $("#fileCount");
			fileCountElement.textContent = `${files.length} files are uploaded`;
		});

		uploadForm.addEventListener("submit", async (e) => {
			e.preventDefault();
			$("#tabButtons").innerHTML = "";
			$("#pdf-results-container").innerHTML = "";

			const formData = new FormData();
			const files = folderSupported.checked ? folderInput.files : imageInput.files;
			const progressContainer = $("#progressContainer");
			progressContainer.innerHTML = ''; // Clear previous progress bars

			// Create progress tracking object
			const progressBars = new Map();

			for (const file of files) {
				formData.append(files.length > 1 ? "images" : "image", file);
				const progressElement = createProgressBar(file.name);
				progressContainer.appendChild(progressElement);
				progressBars.set(file.name, progressElement);
			}

			formData.append("cached", cached.checked);

			resultDiv.textContent = "Uploading...";
			loader.style.display = "block";
			uploadButton.disabled = true;

			try {
				const uploadUrl = files.length > 1
					? `${BASE_URL}/upload/array`
					: `${BASE_URL}/upload`;

				const response = await fetch(uploadUrl, {
					method: "POST",
					body: formData,
				});

				if (response.body) {
					const reader = response.body.getReader();
					const decoder = new TextDecoder();
					let jobIds = new Map();

					while (true) {
						const { value, done } = await reader.read();
						if (done) break;

						const events = decoder.decode(value).split("\n\n");
						for (const event of events) {
							if (event.startsWith("data: ")) {
								const data = JSON.parse(event.slice(6));
								console.log("Received update:", data);

								if (data.jobId && data.fileName) {
									jobIds.set(data.jobId, data.fileName);
									resultDiv.textContent += `Job ID: ${data.jobId} for file ${data.fileName}\n`;
								} else if (data.state === "active") {
									const progressElement = progressBars.get(data.fileName);
									if (progressElement) {
										updateProgress(progressElement, data.progress);
									}
									resultDiv.textContent += `Progress: ${data.progress}% for file ${data.fileName}\n`;
								} else if (data.state === "failed") {
									console.error("Job failed, reason:", data.failedReason);
									resultDiv.textContent += `Job failed for file ${data.fileName}: ${data.failedReason}\n`;
								}
							}
						}
					}

					for (const [jobId, fileName] of jobIds) {
						fetchResult(jobId, fileName);
					}

				} else {
					console.error("Response body is not readable");
				}
			} catch (error) {
				console.error(error);
				resultDiv.textContent = "Error: " + error.message;
				loader.style.display = "none";
				uploadButton.disabled = false;
			}
		});

		function shortenText(text, numChars) {
			return text.length > numChars ? text.slice(0, numChars) + "..." : text;
		}

		async function fetchResult(jobId, fileName) {
			console.log(`Fetching result for job ${jobId}`);
			try {
				const response = await fetch(`${BASE_URL}/result/${jobId}`);
				console.log(
					`Received response for job ${jobId}, status: ${response.status}`
				);

				if (response.headers.get("Content-Type") === "application/pdf") {
					console.log("Received PDF, creating blob URL");
					const pdfBlob = await response.blob();
					const pdfUrl = URL.createObjectURL(pdfBlob);

					const tabButtons = $("#tabButtons");
					const button = document.createElement("button");
					button.className = "tab-button";
					button.textContent = `${fileName.length > 20 ? shortenText(fileName, 20) : fileName}`;
					tabButtons.appendChild(button);

					// Create PDF container
					const pdfContainer = document.createElement("div");
					pdfContainer.className = "pdf-container";
					const pdfViewer = document.createElement("iframe");
					pdfViewer.className = "pdf-viewer";
					pdfViewer.src = pdfUrl;
					pdfContainer.appendChild(pdfViewer);
					pdfResultsContainer.appendChild(pdfContainer);

					// If this is the first PDF, make it active
					if (tabButtons.children.length === 1) {
						button.classList.add("active");
						pdfContainer.classList.add("active");
					}

					// Add click event to tab button
					button.addEventListener("click", () => {
						// Remove active class from all buttons and containers
						$$(".tab-button").forEach(btn => btn.classList.remove("active"));
						$$(".pdf-container").forEach(container => container.classList.remove("active"));

						// Add active class to clicked button and its container
						button.classList.add("active");
						pdfContainer.classList.add("active");
					});

					resultDiv.textContent += `Processing completed for job ${jobId}! PDF added to tabs.\n`;
					loader.style.display = "none";
					uploadButton.disabled = false;
				} else {
					console.log("Response is not a PDF, parsing as JSON");
					const data = await response.json();
					if (data.state === "completed") {
						console.log(
							"State is completed, but did not receive PDF. Retrying..."
						);
						setTimeout(() => fetchResult(jobId), 1000);
					} else if (data.error) {
						console.error(`Error: ${data.error}`);
						resultDiv.textContent += `Error for job ${jobId}: ${data.error}\n`;
						loader.style.display = "none";
						uploadButton.disabled = false;
					} else {
						console.log(`Job not yet completed, state: ${data.state}`);
						resultDiv.textContent += `Status for job ${jobId}: ${data.state}\n`;
						setTimeout(() => fetchResult(jobId), 1000);
					}
				}
			} catch (error) {
				console.error("Error fetching result:", error);
				resultDiv.textContent = "Error fetching result: " + error.message;
				loader.style.display = "none";
				uploadButton.disabled = false;
			}
		}
	</script>
</body>

</html>